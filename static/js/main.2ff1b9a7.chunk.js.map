{"version":3,"sources":["contracts/marketplace_approval.teal","contracts/marketplace_clear.teal","utils/conversions.js","components/Cover.jsx","components/utils/Identicon.jsx","components/Wallet.jsx","components/marketplace/AddProduct.jsx","components/marketplace/Product.jsx","components/utils/Loader.jsx","components/utils/Notifications.jsx","components/marketplace/Products.jsx","assets/img/sandwich.jpg","App.js","reportWebVitals.js","index.js","utils/marketplace.js","utils/constants.js"],"names":["base64ToUTF8String","base64String","Buffer","from","toString","utf8ToBase64String","utf8String","truncateAddress","address","slice","length","microAlgosToString","num","BigNumber","shiftedBy","ALGORAND_DECIMALS","toFixed","stringToMicroAlgos","str","toNumber","Cover","name","coverImg","connect","className","style","maxWidth","src","alt","Button","onClick","variant","Identicon","size","rest","width","height","diameter","seed","parseInt","Wallet","amount","symbol","disconnect","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","AddProduct","createProduct","useState","setName","image","setImage","description","setDescription","price","setPrice","isFormFilled","useCallback","show","setShow","handleClose","Modal","onHide","centered","Header","closeButton","Title","Form","Body","FloatingLabel","controlId","label","Control","type","onChange","e","value","placeholder","Footer","disabled","Product","product","buyProduct","deleteProduct","sold","appId","owner","count","setCount","Col","Card","Badge","bg","objectFit","Text","min","max","Number","Loader","role","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","defaultProps","Products","fetchBalance","products","setProducts","loading","setLoading","getProducts","getProductsAction","then","catch","error","console","log","finally","_","useEffect","data","createProductAction","toast","buyProductAction","deleteProductAction","Row","xs","sm","lg","map","index","App","setAddress","balance","setBalance","accountAddress","indexerClient","lookupAccountByID","do","response","_balance","account","connectWallet","myAlgoConnect","accounts","_account","Container","fluid","Nav","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","this","compileProgram","programSource","encoder","TextEncoder","programBytes","encode","algodClient","compile","compileResponse","Uint8Array","result","senderAddress","getTransactionParams","params","fee","algosdk","ALGORAND_MIN_TX_FEE","flatFee","approvalProgram","compiledApprovalProgram","clearProgram","compiledClearProgram","note","marketplaceNote","encodeUint64","appArgs","txn","makeApplicationCreateTxnFromObject","suggestedParams","onComplete","OnApplicationComplete","NoOpOC","numLocalInts","numLocalByteSlices","numLocalBytes","numGlobalInts","numGlobalByteSlices","numGlobalBytes","txId","txID","signTransaction","toByte","signedTxn","sendRawTransaction","blob","waitForConfirmation","confirmedTxn","pendingTransactionInformation","transactionResponse","buyArg","countArg","appCallTxn","makeApplicationCallTxnFromObject","appIndex","paymentTxn","makePaymentTxnWithSuggestedParamsFromObject","to","txnArray","groupID","computeGroupID","i","group","tx","makeApplicationDeleteTxnFromObject","apid","encodedNote","searchForTransactions","notePrefix","txType","minRound","transactionInfo","transactions","transaction","getApplication","push","lookupApplications","includeAll","application","deleted","globalState","creator","getField","fieldName","find","state","key","undefined","field","bytes","uint","config","Algodv2","Indexer","MyAlgoConnect"],"mappings":"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","file":"static/js/main.2ff1b9a7.chunk.js","sourcesContent":["export default \"#pragma version 6\\r\\ntxn ApplicationID\\r\\nint 0\\r\\n==\\r\\nbnz main_l8\\r\\ntxn OnCompletion\\r\\nint DeleteApplication\\r\\n==\\r\\nbnz main_l7\\r\\ntxna ApplicationArgs 0\\r\\nbyte \\\"buy\\\"\\r\\n==\\r\\nbnz main_l4\\r\\nerr\\r\\nmain_l4:\\r\\nglobal GroupSize\\r\\nint 2\\r\\n==\\r\\ngtxn 1 TypeEnum\\r\\nint pay\\r\\n==\\r\\ngtxn 1 Receiver\\r\\nglobal CreatorAddress\\r\\n==\\r\\n&&\\r\\ngtxn 1 Amount\\r\\nbyte \\\"PRICE\\\"\\r\\napp_global_get\\r\\ntxna ApplicationArgs 1\\r\\nbtoi\\r\\n*\\r\\n==\\r\\n&&\\r\\ngtxn 1 Sender\\r\\ngtxn 0 Sender\\r\\n==\\r\\n&&\\r\\n&&\\r\\nbnz main_l6\\r\\nint 0\\r\\nreturn\\r\\nmain_l6:\\r\\nbyte \\\"SOLD\\\"\\r\\nbyte \\\"SOLD\\\"\\r\\napp_global_get\\r\\ntxna ApplicationArgs 1\\r\\nbtoi\\r\\n+\\r\\napp_global_put\\r\\nint 1\\r\\nreturn\\r\\nmain_l7:\\r\\ntxn Sender\\r\\nglobal CreatorAddress\\r\\n==\\r\\nreturn\\r\\nmain_l8:\\r\\ntxn NumAppArgs\\r\\nint 4\\r\\n==\\r\\nassert\\r\\ntxn Note\\r\\nbyte \\\"tutorial-marketplace:uv1\\\"\\r\\n==\\r\\nassert\\r\\ntxna ApplicationArgs 3\\r\\nbtoi\\r\\nint 0\\r\\n>\\r\\nassert\\r\\nbyte \\\"NAME\\\"\\r\\ntxna ApplicationArgs 0\\r\\napp_global_put\\r\\nbyte \\\"IMAGE\\\"\\r\\ntxna ApplicationArgs 1\\r\\napp_global_put\\r\\nbyte \\\"DESCRIPTION\\\"\\r\\ntxna ApplicationArgs 2\\r\\napp_global_put\\r\\nbyte \\\"PRICE\\\"\\r\\ntxna ApplicationArgs 3\\r\\nbtoi\\r\\napp_global_put\\r\\nbyte \\\"SOLD\\\"\\r\\nint 0\\r\\napp_global_put\\r\\nint 1\\r\\nreturn\";","export default \"#pragma version 6\\r\\nint 1\\r\\nreturn\";","import { ALGORAND_DECIMALS } from \"./constants\";\r\nimport BigNumber from \"bignumber.js\";\r\n\r\n\r\nexport const base64ToUTF8String = (base64String) => {\r\n    return Buffer.from(base64String, 'base64').toString(\"utf-8\")\r\n}\r\n\r\nexport const utf8ToBase64String = (utf8String) => {\r\n    return Buffer.from(utf8String, 'utf8').toString('base64')\r\n}\r\n\r\n\r\n// Truncate is done in the middle to allow for checking of first and last chars simply to ensure correct address\r\nexport const truncateAddress = (address) => {\r\n    if (!address) return\r\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 5, address.length);\r\n}\r\n\r\n// Amounts in microAlgos (e.g. 10500) are shown as algos (e.g. 10.5) in the frontend\r\nexport const microAlgosToString = (num) => {\r\n    if (!num) return\r\n    let bigNumber = new BigNumber(num)\r\n    return bigNumber.shiftedBy(-ALGORAND_DECIMALS).toFixed(3);\r\n}\r\n\r\n// Convert an amount entered as algos (e.g. 10.5) to microAlgos (e.g. 10500)\r\nexport const stringToMicroAlgos = (str) => {\r\n    if (!str) return\r\n    let bigNumber = new BigNumber(str)\r\n    return bigNumber.shiftedBy(ALGORAND_DECIMALS).toNumber();\r\n}","import React from 'react';\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cover = ({ name, coverImg, connect }) => {\r\n    return (\r\n        <div className=\"d-flex justify-content-center flex-column text-center bg-black min-vh-100\">\r\n            <div className=\"mt-auto text-light mb-5\">\r\n                <div\r\n                    className=\" ratio ratio-1x1 mx-auto mb-2\"\r\n                    style={{ maxWidth: \"320px\" }}\r\n                >\r\n                    <img src={coverImg} alt=\"\" />\r\n                </div>\r\n                <h1>{name}</h1>\r\n                <p>Please connect your wallet to continue.</p>\r\n                <Button\r\n                    onClick={() => connect()}\r\n                    variant=\"outline-light\"\r\n                    className=\"rounded-pill px-3 mt-3\"\r\n                >\r\n                    Connect Wallet\r\n                </Button>\r\n            </div>\r\n            <p className=\"mt-auto text-secondary\">Powered by Algorand</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nCover.propTypes = {\r\n    name: PropTypes.string,\r\n    coverImg: PropTypes.string,\r\n    connect: PropTypes.func\r\n};\r\n\r\nexport default Cover;","import Jazzicon from \"react-jazzicon\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Identicon = ({ size, address, ...rest }) => (\r\n    <div {...rest} style={{ width: `${size}px`, height: `${size}px` }}>\r\n        <Jazzicon diameter={size} seed={parseInt(address.slice(2, 10), 16)} />\r\n    </div>\r\n);\r\n\r\nIdenticon.propTypes = {\r\n    size: PropTypes.number.isRequired,\r\n    address: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Identicon;","import React from 'react';\r\nimport { Dropdown, Spinner, Stack } from 'react-bootstrap';\r\nimport { microAlgosToString, truncateAddress } from '../utils/conversions';\r\nimport Identicon from './utils/Identicon'\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Wallet = ({ address, name, amount, symbol, disconnect }) => {\r\n    if (!address) {\r\n        return null;\r\n    }\r\n    return (\r\n        <>\r\n            <Dropdown>\r\n                <Dropdown.Toggle variant=\"light\" align=\"end\" id=\"dropdown-basic\"\r\n                    className=\"d-flex align-items-center border rounded-pill py-1\">\r\n                    {amount ? (\r\n                        <>\r\n                            {microAlgosToString(amount)}\r\n                            <span className=\"ms-1\"> {symbol}</span>\r\n                        </>\r\n                    ) : (\r\n                        <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\r\n                    )}\r\n                    <Identicon address={address} size={28} className=\"ms-2 me-1\" />\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu className=\"shadow-lg border-0\">\r\n                    <Dropdown.Item href={`https://testnet.algoexplorer.io/address/${address}`}\r\n                        target=\"_blank\">\r\n                        <Stack direction=\"horizontal\" gap={2}>\r\n                            <i className=\"bi bi-person-circle fs-4\" />\r\n                            <div className=\"d-flex flex-column\">\r\n                                {name && (<span className=\"font-monospace\">{name}</span>)}\r\n                                <span className=\"font-monospace\">{truncateAddress(address)}</span>\r\n                            </div>\r\n                        </Stack>\r\n                    </Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.Item as=\"button\" className=\"d-flex align-items-center\" onClick={() => {\r\n                        disconnect();\r\n                    }}>\r\n                        <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\r\n                        Disconnect\r\n                    </Dropdown.Item>\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        </>\r\n    )\r\n};\r\n\r\nWallet.propTypes = {\r\n    address: PropTypes.string,\r\n    name: PropTypes.string,\r\n    amount: PropTypes.number,\r\n    symbol: PropTypes.string,\r\n    disconnect: PropTypes.func\r\n};\r\n\r\nexport default Wallet;","import React, { useCallback, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, FloatingLabel, Form, Modal } from \"react-bootstrap\";\r\nimport { stringToMicroAlgos } from \"../../utils/conversions\";\r\n\r\nconst AddProduct = ({ createProduct }) => {\r\n    const [name, setName] = useState(\"\");\r\n    const [image, setImage] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [price, setPrice] = useState(0);\r\n\r\n    const isFormFilled = useCallback(() => {\r\n        return name && image && description && price > 0\r\n    }, [name, image, description, price]);\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                onClick={handleShow}\r\n                variant=\"dark\"\r\n                className=\"rounded-pill px-0\"\r\n                style={{ width: \"38px\" }}\r\n            >\r\n                <i className=\"bi bi-plus\"></i>\r\n            </Button>\r\n            <Modal show={show} onHide={handleClose} centered>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>New Product</Modal.Title>\r\n                </Modal.Header>\r\n                <Form>\r\n                    <Modal.Body>\r\n                        <FloatingLabel\r\n                            controlId=\"inputName\"\r\n                            label=\"Product name\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                onChange={(e) => {\r\n                                    setName(e.target.value);\r\n                                }}\r\n                                placeholder=\"Enter name of product\"\r\n                            />\r\n                        </FloatingLabel>\r\n                        <FloatingLabel\r\n                            controlId=\"inputUrl\"\r\n                            label=\"Image URL\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder=\"Image URL\"\r\n                                value={image}\r\n                                onChange={(e) => {\r\n                                    setImage(e.target.value);\r\n                                }}\r\n                            />\r\n                        </FloatingLabel>\r\n                        <FloatingLabel\r\n                            controlId=\"inputDescription\"\r\n                            label=\"Description\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                placeholder=\"description\"\r\n                                style={{ height: \"80px\" }}\r\n                                onChange={(e) => {\r\n                                    setDescription(e.target.value);\r\n                                }}\r\n                            />\r\n                        </FloatingLabel>\r\n                        <FloatingLabel\r\n                            controlId=\"inputPrice\"\r\n                            label=\"Price in ALGO\"\r\n                            className=\"mb-3\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder=\"Price\"\r\n                                onChange={(e) => {\r\n                                    setPrice(stringToMicroAlgos(e.target.value));\r\n                                }}\r\n                            />\r\n                        </FloatingLabel>\r\n                    </Modal.Body>\r\n                </Form>\r\n                <Modal.Footer>\r\n                    <Button variant=\"outline-secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"dark\"\r\n                        disabled={!isFormFilled()}\r\n                        onClick={() => {\r\n                            createProduct({\r\n                                name,\r\n                                image,\r\n                                description,\r\n                                price\r\n                            });\r\n                            handleClose();\r\n                        }}\r\n                    >\r\n                        Save product\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nAddProduct.propTypes = {\r\n    createProduct: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddProduct;","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Badge, Button, Card, Col, FloatingLabel, Form, Stack } from \"react-bootstrap\";\r\nimport { microAlgosToString, truncateAddress } from \"../../utils/conversions\";\r\nimport Identicon from \"../utils/Identicon\";\r\n\r\nconst Product = ({ address, product, buyProduct, deleteProduct }) => {\r\n    const { name, image, description, price, sold, appId, owner } =\r\n        product;\r\n\r\n    const [count, setCount] = useState(1)\r\n\r\n    return (\r\n        <Col key={appId}>\r\n            <Card className=\"h-100\">\r\n                <Card.Header>\r\n                    <Stack direction=\"horizontal\" gap={2}>\r\n                        <span className=\"font-monospace text-secondary\">{truncateAddress(owner)}</span>\r\n                        <Identicon size={28} address={owner} />\r\n                        <Badge bg=\"secondary\" className=\"ms-auto\">\r\n                            {sold} Sold\r\n                        </Badge>\r\n                    </Stack>\r\n                </Card.Header>\r\n                <div className=\"ratio ratio-4x3\">\r\n                    <img src={image} alt={name} style={{ objectFit: \"cover\" }} />\r\n                </div>\r\n                <Card.Body className=\"d-flex flex-column text-center\">\r\n                    <Card.Title>{name}</Card.Title>\r\n                    <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\r\n                    <Form className=\"d-flex align-content-stretch flex-row gap-2\">\r\n                        <FloatingLabel\r\n                            controlId=\"inputCount\"\r\n                            label=\"Count\"\r\n                            className=\"w-25\"\r\n                        >\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                value={count}\r\n                                min=\"1\"\r\n                                max=\"10\"\r\n                                onChange={(e) => {\r\n                                    setCount(Number(e.target.value));\r\n                                }}\r\n                            />\r\n                        </FloatingLabel>\r\n                        <Button\r\n                            variant=\"outline-dark\"\r\n                            onClick={() => buyProduct(product, count)}\r\n                            className=\"w-75 py-3\"\r\n                        >\r\n                            Buy for {microAlgosToString(price) * count} ALGO\r\n                        </Button>\r\n                        {product.owner === address &&\r\n                            <Button\r\n                                variant=\"outline-danger\"\r\n                                onClick={() => deleteProduct(product)}\r\n                                className=\"btn\"\r\n                            >\r\n                                <i className=\"bi bi-trash\"></i>\r\n                            </Button>\r\n                        }\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </Col>\r\n    );\r\n};\r\n\r\nProduct.propTypes = {\r\n    address: PropTypes.string.isRequired,\r\n    product: PropTypes.instanceOf(Object).isRequired,\r\n    buyProduct: PropTypes.func.isRequired,\r\n    deleteProduct: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Product;","import React from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nconst Loader = () => (\r\n    <div className=\"d-flex justify-content-center\">\r\n        <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n        </Spinner>\r\n    </div>\r\n);\r\n\r\nexport default Loader;","import React from \"react\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = () => (\r\n    <ToastContainer\r\n        position=\"bottom-center\"\r\n        autoClose={5000}\r\n        hideProgressBar\r\n        newestOnTop\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable={false}\r\n        pauseOnHover\r\n    />\r\n);\r\n\r\nconst NotificationSuccess = ({ text }) => (\r\n    <div>\r\n        <i className=\"bi bi-check-circle-fill text-success mx-2\" />\r\n        <span className=\"text-secondary mx-1\">{text}</span>\r\n    </div>\r\n);\r\n\r\nconst NotificationError = ({ text }) => (\r\n    <div>\r\n        <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\r\n        <span className=\"text-secondary mx-1\">{text}</span>\r\n    </div>\r\n);\r\n\r\nconst Props = {\r\n    text: PropTypes.string,\r\n};\r\n\r\nconst DefaultProps = {\r\n    text: \"\",\r\n};\r\n\r\nNotificationSuccess.propTypes = Props;\r\nNotificationSuccess.defaultProps = DefaultProps;\r\n\r\nNotificationError.propTypes = Props;\r\nNotificationError.defaultProps = DefaultProps;\r\n\r\nexport { Notification, NotificationSuccess, NotificationError };","import React, { useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport AddProduct from \"./AddProduct\";\r\nimport Product from \"./Product\";\r\nimport Loader from \"../utils/Loader\";\r\nimport { NotificationError, NotificationSuccess } from \"../utils/Notifications\";\r\nimport { buyProductAction, createProductAction, deleteProductAction, getProductsAction, } from \"../../utils/marketplace\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Row } from \"react-bootstrap\";\r\n\r\nconst Products = ({ address, fetchBalance }) => {\r\n    const [products, setProducts] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const getProducts = async () => {\r\n        setLoading(true);\r\n        getProductsAction()\r\n            .then(products => {\r\n                if (products) {\r\n                    setProducts(products);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n            .finally(_ => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getProducts();\r\n    }, []);\r\n\r\n    const createProduct = async (data) => {\r\n        setLoading(true);\r\n        createProductAction(address, data)\r\n            .then(() => {\r\n                toast(<NotificationSuccess text=\"Product added successfully.\" />);\r\n                getProducts();\r\n                fetchBalance(address);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                toast(<NotificationError text=\"Failed to create a product.\" />);\r\n                setLoading(false);\r\n            })\r\n    };\r\n\r\n    const buyProduct = async (product, count) => {\r\n        setLoading(true);\r\n        buyProductAction(address, product, count)\r\n            .then(() => {\r\n                toast(<NotificationSuccess text=\"Product bought successfully\" />);\r\n                getProducts();\r\n                fetchBalance(address);\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                toast(<NotificationError text=\"Failed to purchase product.\" />);\r\n                setLoading(false);\r\n            })\r\n    };\r\n\r\n    const deleteProduct = async (product) => {\r\n        setLoading(true);\r\n        deleteProductAction(address, product.appId)\r\n            .then(() => {\r\n                toast(<NotificationSuccess text=\"Product deleted successfully\" />);\r\n                getProducts();\r\n                fetchBalance(address);\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                toast(<NotificationError text=\"Failed to delete product.\" />);\r\n                setLoading(false);\r\n            })\r\n    };\r\n\r\n    if (loading) {\r\n        return <Loader />;\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n                <h1 className=\"fs-4 fw-bold mb-0\">Street Food</h1>\r\n                <AddProduct createProduct={createProduct} />\r\n            </div>\r\n            <Row xs={1} sm={2} lg={3} className=\"g-3 mb-5 g-xl-4 g-xxl-5\">\r\n                <>\r\n                    {products.map((product, index) => (\r\n                        <Product\r\n                            address={address}\r\n                            product={product}\r\n                            buyProduct={buyProduct}\r\n                            deleteProduct={deleteProduct}\r\n                            key={index}\r\n                        />\r\n                    ))}\r\n                </>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nProducts.propTypes = {\r\n    address: PropTypes.string.isRequired,\r\n    fetchBalance: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Products;","export default __webpack_public_path__ + \"static/media/sandwich.2d312449.jpg\";","import React, { useState } from \"react\";\nimport Cover from \"./components/Cover\";\nimport './App.css';\nimport Wallet from \"./components/Wallet\";\nimport { Container, Nav } from \"react-bootstrap\";\nimport Products from \"./components/marketplace/Products\";\nimport { Notification } from \"./components/utils/Notifications\";\nimport { indexerClient, myAlgoConnect } from \"./utils/constants\";\nimport coverImg from \"./assets/img/sandwich.jpg\"\n\nconst App = function AppWrapper() {\n\n  const [address, setAddress] = useState(null);\n  const [name, setName] = useState(null);\n  const [balance, setBalance] = useState(0);\n\n  const fetchBalance = async (accountAddress) => {\n    indexerClient.lookupAccountByID(accountAddress).do()\n      .then(response => {\n        const _balance = response.account.amount;\n        setBalance(_balance);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  const connectWallet = async () => {\n    myAlgoConnect.connect()\n      .then(accounts => {\n        const _account = accounts[0];\n        setAddress(_account.address);\n        setName(_account.name);\n        fetchBalance(_account.address);\n      }).catch(error => {\n        console.log('Could not connect to MyAlgo wallet');\n        console.error(error);\n      })\n  };\n\n  const disconnect = () => {\n    setAddress(null);\n    setName(null);\n    setBalance(null);\n  };\n\n  return (\n    <>\n      <Notification />\n      {address ? (\n        <Container fluid=\"md\">\n          <Nav className=\"justify-content-end pt-3 pb-5\">\n            <Nav.Item>\n              <Wallet\n                address={address}\n                name={name}\n                amount={balance}\n                disconnect={disconnect}\n                symbol={\"ALGO\"}\n              />\n            </Nav.Item>\n          </Nav>\n          <main>\n            <Products address={address} fetchBalance={fetchBalance} />\n          </main>\n        </Container>\n      ) : (\n        <Cover name={\"Street Food\"} coverImg={coverImg} connect={connectWallet} />\n      )}\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","import algosdk from \"algosdk\";\r\nimport {\r\n    algodClient,\r\n    indexerClient,\r\n    marketplaceNote,\r\n    minRound,\r\n    myAlgoConnect,\r\n    numGlobalBytes,\r\n    numGlobalInts,\r\n    numLocalBytes,\r\n    numLocalInts\r\n} from \"./constants\";\r\n/* eslint import/no-webpack-loader-syntax: off */\r\nimport approvalProgram from \"!!raw-loader!../contracts/marketplace_approval.teal\";\r\nimport clearProgram from \"!!raw-loader!../contracts/marketplace_clear.teal\";\r\nimport { base64ToUTF8String, utf8ToBase64String } from \"./conversions\";\r\n\r\nclass Product {\r\n    constructor(name, image, description, price, sold, appId, owner) {\r\n        this.name = name;\r\n        this.image = image;\r\n        this.description = description;\r\n        this.price = price;\r\n        this.sold = sold;\r\n        this.appId = appId;\r\n        this.owner = owner;\r\n    }\r\n}\r\n\r\n// Compile smart contract in .teal format to program\r\nconst compileProgram = async (programSource) => {\r\n    let encoder = new TextEncoder();\r\n    let programBytes = encoder.encode(programSource);\r\n    let compileResponse = await algodClient.compile(programBytes).do();\r\n    return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\r\n}\r\n\r\n// CREATE PRODUCT: ApplicationCreateTxn\r\nexport const createProductAction = async (senderAddress, product) => {\r\n    console.log(\"Adding product...\")\r\n\r\n    let params = await algodClient.getTransactionParams().do();\r\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\r\n    params.flatFee = true;\r\n\r\n    // Compile programs\r\n    const compiledApprovalProgram = await compileProgram(approvalProgram)\r\n    const compiledClearProgram = await compileProgram(clearProgram)\r\n\r\n    // Build note to identify transaction later and required app args as Uint8Arrays\r\n    let note = new TextEncoder().encode(marketplaceNote);\r\n    let name = new TextEncoder().encode(product.name);\r\n    let image = new TextEncoder().encode(product.image);\r\n    let description = new TextEncoder().encode(product.description);\r\n    let price = algosdk.encodeUint64(product.price);\r\n\r\n    let appArgs = [name, image, description, price]\r\n\r\n    // Create ApplicationCreateTxn\r\n    let txn = algosdk.makeApplicationCreateTxnFromObject({\r\n        from: senderAddress,\r\n        suggestedParams: params,\r\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\r\n        approvalProgram: compiledApprovalProgram,\r\n        clearProgram: compiledClearProgram,\r\n        numLocalInts: numLocalInts,\r\n        numLocalByteSlices: numLocalBytes,\r\n        numGlobalInts: numGlobalInts,\r\n        numGlobalByteSlices: numGlobalBytes,\r\n        note: note,\r\n        appArgs: appArgs\r\n    });\r\n\r\n    // Get transaction ID\r\n    let txId = txn.txID().toString();\r\n\r\n    // Sign & submit the transaction\r\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\r\n    console.log(\"Signed transaction with txID: %s\", txId);\r\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\r\n\r\n    // Wait for transaction to be confirmed\r\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\r\n\r\n    // Get the completed Transaction\r\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\r\n\r\n    // Get created application id and notify about completion\r\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\r\n    let appId = transactionResponse['application-index'];\r\n    console.log(\"Created new app-id: \", appId);\r\n    return appId;\r\n}\r\n\r\n\r\n// BUY PRODUCT: Group transaction consisting of ApplicationCallTxn and PaymentTxn\r\nexport const buyProductAction = async (senderAddress, product, count) => {\r\n    console.log(\"Buying product...\");\r\n\r\n    let params = await algodClient.getTransactionParams().do();\r\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\r\n    params.flatFee = true;\r\n\r\n    // Build required app args as Uint8Array\r\n    let buyArg = new TextEncoder().encode(\"buy\")\r\n    let countArg = algosdk.encodeUint64(count);\r\n    let appArgs = [buyArg, countArg]\r\n\r\n    // Create ApplicationCallTxn\r\n    let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\r\n        from: senderAddress,\r\n        appIndex: product.appId,\r\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\r\n        suggestedParams: params,\r\n        appArgs: appArgs\r\n    })\r\n\r\n    // Create PaymentTxn\r\n    let paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n        from: senderAddress,\r\n        to: product.owner,\r\n        amount: product.price * count,\r\n        suggestedParams: params\r\n    })\r\n\r\n    let txnArray = [appCallTxn, paymentTxn]\r\n\r\n    // Create group transaction out of previously build transactions\r\n    let groupID = algosdk.computeGroupID(txnArray)\r\n    for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\r\n\r\n    // Sign & submit the group transaction\r\n    let signedTxn = await myAlgoConnect.signTransaction(txnArray.map(txn => txn.toByte()));\r\n    console.log(\"Signed group transaction\");\r\n    let tx = await algodClient.sendRawTransaction(signedTxn.map(txn => txn.blob)).do();\r\n\r\n    // Wait for group transaction to be confirmed\r\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\r\n\r\n    // Notify about completion\r\n    console.log(\"Group transaction \" + tx.txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\r\n}\r\n\r\n// DELETE PRODUCT: ApplicationDeleteTxn\r\nexport const deleteProductAction = async (senderAddress, index) => {\r\n    console.log(\"Deleting application...\");\r\n\r\n    let params = await algodClient.getTransactionParams().do();\r\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\r\n    params.flatFee = true;\r\n\r\n    // Create ApplicationDeleteTxn\r\n    let txn = algosdk.makeApplicationDeleteTxnFromObject({\r\n        from: senderAddress, suggestedParams: params, appIndex: index,\r\n    });\r\n\r\n    // Get transaction ID\r\n    let txId = txn.txID().toString();\r\n\r\n    // Sign & submit the transaction\r\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\r\n    console.log(\"Signed transaction with txID: %s\", txId);\r\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\r\n\r\n    // Wait for transaction to be confirmed\r\n    const confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\r\n\r\n    // Get the completed Transaction\r\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\r\n\r\n    // Get application id of deleted application and notify about completion\r\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\r\n    let appId = transactionResponse['txn']['txn'].apid;\r\n    console.log(\"Deleted app-id: \", appId);\r\n}\r\n\r\n//...\r\n// GET PRODUCTS: Use indexer\r\nexport const getProductsAction = async () => {\r\n    console.log(\"Fetching products...\")\r\n    let note = new TextEncoder().encode(marketplaceNote);\r\n    let encodedNote = Buffer.from(note).toString(\"base64\");\r\n\r\n    // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\r\n    let transactionInfo = await indexerClient.searchForTransactions()\r\n        .notePrefix(encodedNote)\r\n        .txType(\"appl\")\r\n        .minRound(minRound)\r\n        .do();\r\n    let products = []\r\n    for (const transaction of transactionInfo.transactions) {\r\n        let appId = transaction[\"created-application-index\"]\r\n        if (appId) {\r\n            // Step 2: Get each application by application id\r\n            let product = await getApplication(appId)\r\n            if (product) {\r\n                products.push(product)\r\n            }\r\n        }\r\n    }\r\n    console.log(\"Products fetched.\")\r\n    return products\r\n}\r\n\r\nconst getApplication = async (appId) => {\r\n    try {\r\n        // 1. Get application by appId\r\n        let response = await indexerClient.lookupApplications(appId).includeAll(true).do();\r\n        if (response.application.deleted) {\r\n            return null;\r\n        }\r\n        let globalState = response.application.params[\"global-state\"]\r\n\r\n        // 2. Parse fields of response and return product\r\n        let owner = response.application.params.creator\r\n        let name = \"\"\r\n        let image = \"\"\r\n        let description = \"\"\r\n        let price = 0\r\n        let sold = 0\r\n\r\n        const getField = (fieldName, globalState) => {\r\n            return globalState.find(state => {\r\n                return state.key === utf8ToBase64String(fieldName);\r\n            })\r\n        }\r\n\r\n        if (getField(\"NAME\", globalState) !== undefined) {\r\n            let field = getField(\"NAME\", globalState).value.bytes\r\n            name = base64ToUTF8String(field)\r\n        }\r\n\r\n        if (getField(\"IMAGE\", globalState) !== undefined) {\r\n            let field = getField(\"IMAGE\", globalState).value.bytes\r\n            image = base64ToUTF8String(field)\r\n        }\r\n\r\n        if (getField(\"DESCRIPTION\", globalState) !== undefined) {\r\n            let field = getField(\"DESCRIPTION\", globalState).value.bytes\r\n            description = base64ToUTF8String(field)\r\n        }\r\n\r\n        if (getField(\"PRICE\", globalState) !== undefined) {\r\n            price = getField(\"PRICE\", globalState).value.uint\r\n        }\r\n\r\n        if (getField(\"SOLD\", globalState) !== undefined) {\r\n            sold = getField(\"SOLD\", globalState).value.uint\r\n        }\r\n\r\n        return new Product(name, image, description, price, sold, appId, owner)\r\n    } catch (err) {\r\n        return null;\r\n    }\r\n}","import algosdk from \"algosdk\";\r\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\r\n\r\nconst config = {\r\n    algodToken: \"\",\r\n    algodServer: \"https://node.testnet.algoexplorerapi.io\",\r\n    algodPort: \"\",\r\n    indexerToken: \"\",\r\n    indexerServer: \"https://algoindexer.testnet.algoexplorerapi.io\",\r\n    indexerPort: \"\",\r\n}\r\n\r\nexport const algodClient = new algosdk.Algodv2(config.algodToken, config.algodServer, config.algodPort)\r\n\r\nexport const indexerClient = new algosdk.Indexer(config.indexerToken, config.indexerServer, config.indexerPort);\r\n\r\nexport const myAlgoConnect = new MyAlgoConnect();\r\n\r\nexport const minRound = 21540981;\r\n\r\n// https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0002.md\r\nexport const marketplaceNote = \"tutorial-marketplace:uv1\"\r\n\r\n// Maximum local storage allocation, immutable\r\nexport const numLocalInts = 0;\r\nexport const numLocalBytes = 0;\r\n// Maximum global storage allocation, immutable\r\nexport const numGlobalInts = 2; // Global variables stored as Int: count, sold\r\nexport const numGlobalBytes = 3; // Global variables stored as Bytes: name, description, image\r\n\r\nexport const ALGORAND_DECIMALS = 6;"],"sourceRoot":""}